@code {
    
    [Inject]
    private IDictClient client { get; set; }
    
    public string? _searchInput = "カラオケ";

    private IOperationResult<IEntriesByReadingResult> result = null!;

    private async Task SearchByReading()
    {
        result = await client.EntriesByReading.ExecuteAsync(_searchInput);
    }

    protected override async Task OnInitializedAsync()
    {
        if (!String.IsNullOrEmpty(_searchInput))
        {
            await SearchByReading();
        }
    }
}

@page "/entries"

<PageTitle>Index</PageTitle>

<button @onclick="SearchByReading">Search</button>

<div>Showing results for: @_searchInput</div>

@if (result?.Data is not null)
{
    <div>
    @foreach (var entry in result.Data!.EntriesByReading)
    {
        @if(entry!.Kanji!.Count() > 0)
        {
            <ul>
                <li>SequenceId: @entry!.Sequence</li>
                
                <li>Readings</li>
                @foreach (var reading in entry?.Readings!)
                    {
                        <li>@reading.Kana</li>
                    }

                <li>Glossary: @string.Join("; ", entry!.SenseElements!.SelectMany(sense => sense.Glossary!.Select(glossary => glossary.Content)))</li>

            </ul>
        }
    }
    </div>
}




